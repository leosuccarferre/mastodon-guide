// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4k5VUvYN9ByL8a1GrrWDBZ
// Component: W2Dkok7-uMor0
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plume_plasmic_kit_leos_wip.module.css"; // plasmic-import: 4k5VUvYN9ByL8a1GrrWDBZ/projectcss
import sty from "./PlasmicSliderThumb.module.css"; // plasmic-import: W2Dkok7-uMor0/css

export const PlasmicSliderThumb__VariantProps = new Array(
  "hasLabel",
  "isDisabled",
  "isDragging"
);

export const PlasmicSliderThumb__ArgProps = new Array("label", "tooltip");

function PlasmicSliderThumb__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [
    isRootFocusVisibleWithin,
    triggerRootFocusVisibleWithinProps
  ] = useTrigger("useFocusVisibleWithin", {
    isTextInput: false
  });

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root____focusVisibleWithin]: triggers.focusVisibleWithin_root,
        [sty.root__isDisabled]: hasVariant(
          variants,
          "isDisabled",
          "isDisabled"
        ),

        [sty.root__isDragging]: hasVariant(variants, "isDragging", "isDragging")
      })}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      {(hasVariant(variants, "isDragging", "isDragging") ? true : false) ? (
        <div
          data-plasmic-name={"tooltipContainer"}
          data-plasmic-override={overrides.tooltipContainer}
          className={classNames(defaultcss.all, sty.tooltipContainer, {
            [sty.tooltipContainer__hasLabel]: hasVariant(
              variants,
              "hasLabel",
              "hasLabel"
            ),

            [sty.tooltipContainer__isDisabled]: hasVariant(
              variants,
              "isDisabled",
              "isDisabled"
            ),

            [sty.tooltipContainer__isDragging]: hasVariant(
              variants,
              "isDragging",
              "isDragging"
            )
          })}
        >
          <p.PlasmicSlot defaultContents={"35"} value={args.tooltip} />
        </div>
      ) : null}

      <div
        data-plasmic-name={"thumb"}
        data-plasmic-override={overrides.thumb}
        className={classNames(defaultcss.all, sty.thumb, {
          [sty.thumb____focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.thumb__isDragging]: hasVariant(
            variants,
            "isDragging",
            "isDragging"
          )
        })}
      />

      {(hasVariant(variants, "hasLabel", "hasLabel") ? true : false) ? (
        <div
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          className={classNames(defaultcss.all, sty.labelContainer, {
            [sty.labelContainer__hasLabel]: hasVariant(
              variants,
              "hasLabel",
              "hasLabel"
            )
          })}
        >
          <p.PlasmicSlot defaultContents={"Label"} value={args.label} />
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "tooltipContainer", "thumb", "labelContainer"],
  tooltipContainer: ["tooltipContainer"],
  thumb: ["thumb"],
  labelContainer: ["labelContainer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSliderThumb__ArgProps,
      internalVariantPropNames: PlasmicSliderThumb__VariantProps
    });

    return PlasmicSliderThumb__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSliderThumb";
  } else {
    func.displayName = `PlasmicSliderThumb.${nodeName}`;
  }
  return func;
}

export const PlasmicSliderThumb = Object.assign(
  // Top-level PlasmicSliderThumb renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tooltipContainer: makeNodeComponent("tooltipContainer"),
    thumb: makeNodeComponent("thumb"),
    labelContainer: makeNodeComponent("labelContainer"),
    // Metadata about props expected for PlasmicSliderThumb
    internalVariantProps: PlasmicSliderThumb__VariantProps,
    internalArgProps: PlasmicSliderThumb__ArgProps
  }
);

export default PlasmicSliderThumb;
/* prettier-ignore-end */
