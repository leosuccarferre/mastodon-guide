// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4k5VUvYN9ByL8a1GrrWDBZ
// Component: YA4SST2evAJC
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plume_plasmic_kit_leos_wip.module.css"; // plasmic-import: 4k5VUvYN9ByL8a1GrrWDBZ/projectcss
import sty from "./PlasmicTextField.module.css"; // plasmic-import: YA4SST2evAJC/css
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: dqodewSdWI/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: sLYQKxFjVe/icon

export const PlasmicTextField__VariantProps = new Array(
  "withIcons",
  "type",
  "isDisabled"
);

export const PlasmicTextField__ArgProps = new Array(
  "startIcon",
  "endIcon",
  "label",
  "val",
  "alt"
);

function PlasmicTextField__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [
    isRootFocusVisibleWithin,
    triggerRootFocusVisibleWithinProps
  ] = useTrigger("useFocusVisibleWithin", {
    isTextInput: true
  });

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root____focusVisibleWithin]: triggers.focusVisibleWithin_root,
        [sty.root__isDisabled]: hasVariant(variants, "isDisabled", "isDisabled")
      })}
      title={args.alt}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      {(hasVariant(variants, "type", "hasLabel") ? true : false) ? (
        <div
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          className={classNames(defaultcss.all, sty.labelContainer, {
            [sty.labelContainer__isDisabled]: hasVariant(
              variants,
              "isDisabled",
              "isDisabled"
            ),

            [sty.labelContainer__type_hasLabel]: hasVariant(
              variants,
              "type",
              "hasLabel"
            ),

            [sty.labelContainer__withIcons_start]: hasVariant(
              variants,
              "withIcons",
              "start"
            )
          })}
        >
          <div
            data-plasmic-name={"box"}
            data-plasmic-override={overrides.box}
            className={classNames(defaultcss.all, sty.box)}
          >
            <p.PlasmicSlot
              defaultContents={"Text Label"}
              value={args.label}
              className={classNames(sty.slotLabel, {
                [sty.slotLabel__isDisabled]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                )
              })}
            />
          </div>
        </div>
      ) : null}

      <div
        data-plasmic-name={"textboxContainer"}
        data-plasmic-override={overrides.textboxContainer}
        className={classNames(defaultcss.all, sty.textboxContainer, {
          [sty.textboxContainer____focusVisibleWithin]:
            triggers.focusVisibleWithin_root,
          [sty.textboxContainer__isDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),

          [sty.textboxContainer__withIcons_end]: hasVariant(
            variants,
            "withIcons",
            "end"
          ),

          [sty.textboxContainer__withIcons_end_withIcons_start]:
            hasVariant(variants, "withIcons", "end") &&
            hasVariant(variants, "withIcons", "start"),
          [sty.textboxContainer__withIcons_start]: hasVariant(
            variants,
            "withIcons",
            "start"
          )
        })}
      >
        {(hasVariant(variants, "withIcons", "start") ? true : false) ? (
          <div
            data-plasmic-name={"startIconContainer"}
            data-plasmic-override={overrides.startIconContainer}
            className={classNames(defaultcss.all, sty.startIconContainer, {
              [sty.startIconContainer__withIcons_start]: hasVariant(
                variants,
                "withIcons",
                "start"
              )
            })}
          >
            <p.PlasmicSlot
              defaultContents={
                <Icon7Icon
                  data-plasmic-name={"start"}
                  data-plasmic-override={overrides.start}
                  className={classNames(defaultcss.all, sty.start)}
                  role={"img"}
                />
              }
              value={args.startIcon}
              className={classNames(sty.slotStartIcon, {
                [sty.slotStartIcon__isDisabled]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                ),

                [sty.slotStartIcon__withIcons_start]: hasVariant(
                  variants,
                  "withIcons",
                  "start"
                )
              })}
            />
          </div>
        ) : null}

        <input
          data-plasmic-name={"textbox"}
          data-plasmic-override={overrides.textbox}
          className={classNames(defaultcss.input, sty.textbox, {
            [sty.textbox____focusVisibleWithin]:
              triggers.focusVisibleWithin_root,
            [sty.textbox__isDisabled]: hasVariant(
              variants,
              "isDisabled",
              "isDisabled"
            ),

            [sty.textbox__withIcons_end]: hasVariant(
              variants,
              "withIcons",
              "end"
            ),

            [sty.textbox__withIcons_start]: hasVariant(
              variants,
              "withIcons",
              "start"
            )
          })}
          placeholder={"Enter valueâ€¦"}
          type={"text"}
          value={args.val}
        />

        {(hasVariant(variants, "withIcons", "end") ? true : false) ? (
          <div
            data-plasmic-name={"endIconContainer"}
            data-plasmic-override={overrides.endIconContainer}
            className={classNames(defaultcss.all, sty.endIconContainer, {
              [sty.endIconContainer__withIcons_end]: hasVariant(
                variants,
                "withIcons",
                "end"
              )
            })}
          >
            <p.PlasmicSlot
              defaultContents={
                <Icon2Icon
                  data-plasmic-name={"end"}
                  data-plasmic-override={overrides.end}
                  className={classNames(defaultcss.all, sty.end)}
                  role={"img"}
                />
              }
              value={args.endIcon}
              className={classNames(sty.slotEndIcon, {
                [sty.slotEndIcon__isDisabled]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                ),

                [sty.slotEndIcon__withIcons_end]: hasVariant(
                  variants,
                  "withIcons",
                  "end"
                )
              })}
            />
          </div>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "labelContainer",
    "box",
    "textboxContainer",
    "startIconContainer",
    "start",
    "textbox",
    "endIconContainer",
    "end"
  ],

  labelContainer: ["labelContainer", "box"],
  box: ["box"],
  textboxContainer: [
    "textboxContainer",
    "startIconContainer",
    "start",
    "textbox",
    "endIconContainer",
    "end"
  ],

  startIconContainer: ["startIconContainer", "start"],
  start: ["start"],
  textbox: ["textbox"],
  endIconContainer: ["endIconContainer", "end"],
  end: ["end"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTextField__ArgProps,
      internalVariantPropNames: PlasmicTextField__VariantProps
    });

    return PlasmicTextField__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTextField";
  } else {
    func.displayName = `PlasmicTextField.${nodeName}`;
  }
  return func;
}

export const PlasmicTextField = Object.assign(
  // Top-level PlasmicTextField renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    labelContainer: makeNodeComponent("labelContainer"),
    box: makeNodeComponent("box"),
    textboxContainer: makeNodeComponent("textboxContainer"),
    startIconContainer: makeNodeComponent("startIconContainer"),
    start: makeNodeComponent("start"),
    textbox: makeNodeComponent("textbox"),
    endIconContainer: makeNodeComponent("endIconContainer"),
    end: makeNodeComponent("end"),
    // Metadata about props expected for PlasmicTextField
    internalVariantProps: PlasmicTextField__VariantProps,
    internalArgProps: PlasmicTextField__ArgProps
  }
);

export default PlasmicTextField;
/* prettier-ignore-end */
