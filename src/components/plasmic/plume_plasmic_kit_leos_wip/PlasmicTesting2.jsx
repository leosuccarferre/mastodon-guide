// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4k5VUvYN9ByL8a1GrrWDBZ
// Component: N1RvchKX1E
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 0PjHSFlclC74/component
import { ScreenContext } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: mzc1S_Z5rQgP0/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plume_plasmic_kit_leos_wip.module.css"; // plasmic-import: 4k5VUvYN9ByL8a1GrrWDBZ/projectcss
import sty from "./PlasmicTesting2.module.css"; // plasmic-import: N1RvchKX1E/css

export const PlasmicTesting2__VariantProps = new Array("unnamedVariant");

export const PlasmicTesting2__ArgProps = new Array("newnew");

function PlasmicTesting2__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: React.useContext(ScreenContext)
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__unnamedVariant]: hasVariant(
          variants,
          "unnamedVariant",
          "unnamedVariant"
        )
      })}
    >
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(defaultcss.all, sty.columns, {
          [sty.columns__unnamedVariant]: hasVariant(
            variants,
            "unnamedVariant",
            "unnamedVariant"
          )
        })}
      >
        <div
          data-plasmic-name={"column"}
          data-plasmic-override={overrides.column}
          className={classNames(defaultcss.all, sty.column)}
        >
          <div className={classNames(defaultcss.all, sty.box__fyK)} />

          <div className={classNames(defaultcss.all, sty.box___76Zs5)} />

          <div className={classNames(defaultcss.all, sty.box__e9XX4)} />
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "button", "columns", "column"],
  button: ["button"],
  columns: ["columns", "column"],
  column: ["column"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTesting2__ArgProps,
      internalVariantPropNames: PlasmicTesting2__VariantProps
    });

    return PlasmicTesting2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTesting2";
  } else {
    func.displayName = `PlasmicTesting2.${nodeName}`;
  }
  return func;
}

export const PlasmicTesting2 = Object.assign(
  // Top-level PlasmicTesting2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    // Metadata about props expected for PlasmicTesting2
    internalVariantProps: PlasmicTesting2__VariantProps,
    internalArgProps: PlasmicTesting2__ArgProps
  }
);

export default PlasmicTesting2;
/* prettier-ignore-end */
