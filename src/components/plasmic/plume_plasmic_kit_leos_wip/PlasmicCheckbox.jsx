// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4k5VUvYN9ByL8a1GrrWDBZ
// Component: Zj94HcL0zZk4
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ThemeContext } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: kuNhmFdqPZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plume_plasmic_kit_leos_wip.module.css"; // plasmic-import: 4k5VUvYN9ByL8a1GrrWDBZ/projectcss
import sty from "./PlasmicCheckbox.module.css"; // plasmic-import: Zj94HcL0zZk4/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: lge7i2r7Gx/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 3ILg9hRZBO/icon

export const PlasmicCheckbox__VariantProps = new Array(
  "isSelected",
  "isDisabled",
  "isIndeterminate",
  "hasLabel"
);

export const PlasmicCheckbox__ArgProps = new Array("children");

function PlasmicCheckbox__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [
    isRootFocusVisibleWithin,
    triggerRootFocusVisibleWithinProps
  ] = useTrigger("useFocusVisibleWithin", {
    isTextInput: false
  });

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin
  };

  const globalVariants = ensureGlobalVariants({
    theme: React.useContext(ThemeContext)
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root____focusVisibleWithin]: triggers.focusVisibleWithin_root,
        [sty.root__global_theme_dark]: hasVariant(
          globalVariants,
          "theme",
          "dark"
        ),

        [sty.root__hasLabel]: hasVariant(variants, "hasLabel", "hasLabel"),
        [sty.root__isDisabled]: hasVariant(
          variants,
          "isDisabled",
          "isDisabled"
        ),

        [sty.root__isIndeterminate]: hasVariant(
          variants,
          "isIndeterminate",
          "isIndeterminate"
        ),

        [sty.root__isSelected]: hasVariant(
          variants,
          "isSelected",
          "isSelected"
        ),

        [sty.root__isSelected_isDisabled]:
          hasVariant(variants, "isSelected", "isSelected") &&
          hasVariant(variants, "isDisabled", "isDisabled")
      })}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(defaultcss.all, sty.box, {
          [sty.box__isSelected]: hasVariant(
            variants,
            "isSelected",
            "isSelected"
          )
        })}
      >
        <div
          data-plasmic-name={"checkbox"}
          data-plasmic-override={overrides.checkbox}
          className={classNames(defaultcss.all, sty.checkbox, {
            [sty.checkbox____focusVisibleWithin]:
              triggers.focusVisibleWithin_root,
            [sty.checkbox__global_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            ),

            [sty.checkbox__isDisabled]: hasVariant(
              variants,
              "isDisabled",
              "isDisabled"
            ),

            [sty.checkbox__isIndeterminate]: hasVariant(
              variants,
              "isIndeterminate",
              "isIndeterminate"
            ),

            [sty.checkbox__isSelected]: hasVariant(
              variants,
              "isSelected",
              "isSelected"
            ),

            [sty.checkbox__isSelected_isDisabled]:
              hasVariant(variants, "isSelected", "isSelected") &&
              hasVariant(variants, "isDisabled", "isDisabled")
          })}
        >
          {(hasVariant(variants, "isSelected", "isSelected") ? true : false) ? (
            <IconIcon
              data-plasmic-name={"check"}
              data-plasmic-override={overrides.check}
              className={classNames(defaultcss.all, sty.check, {
                [sty.check__isDisabled]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                ),

                [sty.check__isIndeterminate]: hasVariant(
                  variants,
                  "isIndeterminate",
                  "isIndeterminate"
                ),

                [sty.check__isSelected]: hasVariant(
                  variants,
                  "isSelected",
                  "isSelected"
                ),

                [sty.check__isSelected_isDisabled]:
                  hasVariant(variants, "isSelected", "isSelected") &&
                  hasVariant(variants, "isDisabled", "isDisabled")
              })}
              role={"img"}
            />
          ) : null}
          {(
            hasVariant(variants, "isIndeterminate", "isIndeterminate")
              ? true
              : hasVariant(variants, "isSelected", "isSelected")
              ? false
              : false
          ) ? (
            <Icon4Icon
              data-plasmic-name={"indeterminate"}
              data-plasmic-override={overrides.indeterminate}
              className={classNames(defaultcss.all, sty.indeterminate, {
                [sty.indeterminate__isDisabled]: hasVariant(
                  variants,
                  "isDisabled",
                  "isDisabled"
                ),

                [sty.indeterminate__isDisabled_isSelected]:
                  hasVariant(variants, "isDisabled", "isDisabled") &&
                  hasVariant(variants, "isSelected", "isSelected"),
                [sty.indeterminate__isIndeterminate]: hasVariant(
                  variants,
                  "isIndeterminate",
                  "isIndeterminate"
                ),

                [sty.indeterminate__isSelected]: hasVariant(
                  variants,
                  "isSelected",
                  "isSelected"
                )
              })}
              role={"img"}
            />
          ) : null}
        </div>
      </div>

      {(hasVariant(variants, "hasLabel", "hasLabel") ? true : false) ? (
        <div
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          className={classNames(defaultcss.all, sty.labelContainer, {
            [sty.labelContainer__hasLabel]: hasVariant(
              variants,
              "hasLabel",
              "hasLabel"
            ),

            [sty.labelContainer__isDisabled]: hasVariant(
              variants,
              "isDisabled",
              "isDisabled"
            ),

            [sty.labelContainer__isIndeterminate]: hasVariant(
              variants,
              "isIndeterminate",
              "isIndeterminate"
            )
          })}
        >
          <p.PlasmicSlot
            defaultContents={"Do this for me"}
            value={args.children}
            className={classNames(sty.slotChildren, {
              [sty.slotChildren____focusVisibleWithin]:
                triggers.focusVisibleWithin_root,
              [sty.slotChildren__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),

              [sty.slotChildren__hasLabel]: hasVariant(
                variants,
                "hasLabel",
                "hasLabel"
              ),

              [sty.slotChildren__hasLabel_global_theme_dark]:
                hasVariant(variants, "hasLabel", "hasLabel") &&
                hasVariant(globalVariants, "theme", "dark"),
              [sty.slotChildren__isDisabled]: hasVariant(
                variants,
                "isDisabled",
                "isDisabled"
              ),

              [sty.slotChildren__isDisabled_isSelected]:
                hasVariant(variants, "isDisabled", "isDisabled") &&
                hasVariant(variants, "isSelected", "isSelected"),
              [sty.slotChildren__isIndeterminate]: hasVariant(
                variants,
                "isIndeterminate",
                "isIndeterminate"
              ),

              [sty.slotChildren__isSelected]: hasVariant(
                variants,
                "isSelected",
                "isSelected"
              )
            })}
          />
        </div>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "box", "checkbox", "check", "indeterminate", "labelContainer"],
  box: ["box", "checkbox", "check", "indeterminate"],
  checkbox: ["checkbox", "check", "indeterminate"],
  check: ["check"],
  indeterminate: ["indeterminate"],
  labelContainer: ["labelContainer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCheckbox__ArgProps,
      internalVariantPropNames: PlasmicCheckbox__VariantProps
    });

    return PlasmicCheckbox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCheckbox";
  } else {
    func.displayName = `PlasmicCheckbox.${nodeName}`;
  }
  return func;
}

export const PlasmicCheckbox = Object.assign(
  // Top-level PlasmicCheckbox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    checkbox: makeNodeComponent("checkbox"),
    check: makeNodeComponent("check"),
    indeterminate: makeNodeComponent("indeterminate"),
    labelContainer: makeNodeComponent("labelContainer"),
    // Metadata about props expected for PlasmicCheckbox
    internalVariantProps: PlasmicCheckbox__VariantProps,
    internalArgProps: PlasmicCheckbox__ArgProps
  }
);

export default PlasmicCheckbox;
/* prettier-ignore-end */
