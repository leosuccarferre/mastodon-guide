// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4k5VUvYN9ByL8a1GrrWDBZ
// Component: VYzUFyB8qmrA
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import SelectTrigger from "../../SelectTrigger"; // plasmic-import: cfwjw9w2-YOi/component
import SelectOption from "../../SelectOption"; // plasmic-import: bEWEojMDzlhL/component
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plume_plasmic_kit_leos_wip.module.css"; // plasmic-import: 4k5VUvYN9ByL8a1GrrWDBZ/projectcss
import sty from "./PlasmicSelect.module.css"; // plasmic-import: VYzUFyB8qmrA/css

export const PlasmicSelect__VariantProps = new Array(
  "isOpen",
  "placeholder",
  "isDisabled",
  "hasLabel"
);

export const PlasmicSelect__ArgProps = new Array(
  "options",
  "label",
  "triggerContent"
);

function PlasmicSelect__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__hasLabel]: hasVariant(variants, "hasLabel", "hasLabel"),
        [sty.root__isDisabled]: hasVariant(
          variants,
          "isDisabled",
          "isDisabled"
        ),

        [sty.root__placeholder]: hasVariant(
          variants,
          "placeholder",
          "placeholder"
        )
      })}
    >
      {(hasVariant(variants, "hasLabel", "hasLabel") ? true : false) ? (
        <div
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          className={classNames(defaultcss.all, sty.labelContainer, {
            [sty.labelContainer__hasLabel]: hasVariant(
              variants,
              "hasLabel",
              "hasLabel"
            )
          })}
        >
          <p.PlasmicSlot
            defaultContents={"Text label"}
            value={args.label}
            className={classNames(sty.slotLabel, {
              [sty.slotLabel__hasLabel]: hasVariant(
                variants,
                "hasLabel",
                "hasLabel"
              )
            })}
          />
        </div>
      ) : null}

      <SelectTrigger
        data-plasmic-name={"trigger"}
        data-plasmic-override={overrides.trigger}
        className={classNames("__wab_instance", sty.trigger, {
          [sty.trigger__isDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),

          [sty.trigger__isOpen]: hasVariant(variants, "isOpen", "isOpen")
        })}
        isActive={
          hasVariant(variants, "isOpen", "isOpen") ? "isActive" : undefined
        }
        isDisabled={
          hasVariant(variants, "isDisabled", "isDisabled")
            ? "isDisabled"
            : undefined
        }
      >
        <p.PlasmicSlot
          defaultContents={"Select an option..."}
          value={args.triggerContent}
        />
      </SelectTrigger>

      {(hasVariant(variants, "isOpen", "isOpen") ? true : false) ? (
        <div
          data-plasmic-name={"overlay"}
          data-plasmic-override={overrides.overlay}
          className={classNames(defaultcss.all, sty.overlay, {
            [sty.overlay__hasLabel]: hasVariant(
              variants,
              "hasLabel",
              "hasLabel"
            ),

            [sty.overlay__isOpen]: hasVariant(variants, "isOpen", "isOpen")
          })}
        >
          <div
            data-plasmic-name={"optionsContainer"}
            data-plasmic-override={overrides.optionsContainer}
            className={classNames(defaultcss.all, sty.optionsContainer, {
              [sty.optionsContainer__hasLabel]: hasVariant(
                variants,
                "hasLabel",
                "hasLabel"
              )
            })}
          >
            <p.PlasmicSlot
              defaultContents={
                <React.Fragment>
                  <SelectOption
                    className={classNames(
                      "__wab_instance",
                      sty.selectOption__cx1BZ
                    )}
                    isSelected={"isSelected"}
                  >
                    {"Option 1"}
                  </SelectOption>

                  <SelectOption
                    className={classNames(
                      "__wab_instance",
                      sty.selectOption__q2MTe
                    )}
                    isDisabled={"isDisabled"}
                  >
                    {"Option 2"}
                  </SelectOption>

                  <SelectOption
                    className={classNames(
                      "__wab_instance",
                      sty.selectOption__kvLfV
                    )}
                  >
                    {"Option 3"}
                  </SelectOption>

                  <SelectOption
                    className={classNames(
                      "__wab_instance",
                      sty.selectOption___9ZPPi
                    )}
                  >
                    {"Option 4"}
                  </SelectOption>
                </React.Fragment>
              }
              value={args.options}
            />
          </div>
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "labelContainer", "trigger", "overlay", "optionsContainer"],
  labelContainer: ["labelContainer"],
  trigger: ["trigger"],
  overlay: ["overlay", "optionsContainer"],
  optionsContainer: ["optionsContainer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSelect__ArgProps,
      internalVariantPropNames: PlasmicSelect__VariantProps
    });

    return PlasmicSelect__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelect";
  } else {
    func.displayName = `PlasmicSelect.${nodeName}`;
  }
  return func;
}

export const PlasmicSelect = Object.assign(
  // Top-level PlasmicSelect renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    labelContainer: makeNodeComponent("labelContainer"),
    trigger: makeNodeComponent("trigger"),
    overlay: makeNodeComponent("overlay"),
    optionsContainer: makeNodeComponent("optionsContainer"),
    // Metadata about props expected for PlasmicSelect
    internalVariantProps: PlasmicSelect__VariantProps,
    internalArgProps: PlasmicSelect__ArgProps
  }
);

export default PlasmicSelect;
/* prettier-ignore-end */
