// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4k5VUvYN9ByL8a1GrrWDBZ
// Component: e8KgVpkHLJaJ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plume_plasmic_kit_leos_wip.module.css"; // plasmic-import: 4k5VUvYN9ByL8a1GrrWDBZ/projectcss
import sty from "./PlasmicRadio.module.css"; // plasmic-import: e8KgVpkHLJaJ/css
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: yj-l0Y1UV/icon

export const PlasmicRadio__VariantProps = new Array(
  "isSelected",
  "isDisabled",
  "hasLabel"
);

export const PlasmicRadio__ArgProps = new Array("children");

function PlasmicRadio__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [
    isRootFocusVisibleWithin,
    triggerRootFocusVisibleWithinProps
  ] = useTrigger("useFocusVisibleWithin", {
    isTextInput: false
  });

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root____focusVisibleWithin]: triggers.focusVisibleWithin_root,
        [sty.root__hasLabel]: hasVariant(variants, "hasLabel", "hasLabel"),
        [sty.root__isDisabled]: hasVariant(
          variants,
          "isDisabled",
          "isDisabled"
        ),

        [sty.root__isSelected]: hasVariant(variants, "isSelected", "isSelected")
      })}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      <div
        data-plasmic-name={"buttonContainer"}
        data-plasmic-override={overrides.buttonContainer}
        className={classNames(defaultcss.all, sty.buttonContainer, {
          [sty.buttonContainer____focusVisibleWithin]:
            triggers.focusVisibleWithin_root,
          [sty.buttonContainer__isDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          )
        })}
      >
        <div
          data-plasmic-name={"box"}
          data-plasmic-override={overrides.box}
          className={classNames(defaultcss.all, sty.box, {
            [sty.box____focusVisibleWithin]: triggers.focusVisibleWithin_root,
            [sty.box__isDisabled]: hasVariant(
              variants,
              "isDisabled",
              "isDisabled"
            ),

            [sty.box__isSelected]: hasVariant(
              variants,
              "isSelected",
              "isSelected"
            )
          })}
        >
          {(hasVariant(variants, "isSelected", "isSelected") ? true : false) ? (
            <Icon5Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(defaultcss.all, sty.svg, {
                [sty.svg__isSelected]: hasVariant(
                  variants,
                  "isSelected",
                  "isSelected"
                )
              })}
              role={"img"}
            />
          ) : null}
        </div>
      </div>

      {(hasVariant(variants, "hasLabel", "hasLabel") ? true : false) ? (
        <div
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          className={classNames(defaultcss.all, sty.labelContainer, {
            [sty.labelContainer____focusVisibleWithin]:
              triggers.focusVisibleWithin_root,
            [sty.labelContainer__hasLabel]: hasVariant(
              variants,
              "hasLabel",
              "hasLabel"
            )
          })}
        >
          <p.PlasmicSlot
            defaultContents={"Option"}
            value={args.children}
            className={classNames(sty.slotChildren, {
              [sty.slotChildren____focusVisibleWithin]:
                triggers.focusVisibleWithin_root,
              [sty.slotChildren__hasLabel]: hasVariant(
                variants,
                "hasLabel",
                "hasLabel"
              ),

              [sty.slotChildren__isDisabled]: hasVariant(
                variants,
                "isDisabled",
                "isDisabled"
              ),

              [sty.slotChildren__isSelected]: hasVariant(
                variants,
                "isSelected",
                "isSelected"
              )
            })}
          />
        </div>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "buttonContainer", "box", "svg", "labelContainer"],
  buttonContainer: ["buttonContainer", "box", "svg"],
  box: ["box", "svg"],
  svg: ["svg"],
  labelContainer: ["labelContainer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRadio__ArgProps,
      internalVariantPropNames: PlasmicRadio__VariantProps
    });

    return PlasmicRadio__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRadio";
  } else {
    func.displayName = `PlasmicRadio.${nodeName}`;
  }
  return func;
}

export const PlasmicRadio = Object.assign(
  // Top-level PlasmicRadio renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    buttonContainer: makeNodeComponent("buttonContainer"),
    box: makeNodeComponent("box"),
    svg: makeNodeComponent("svg"),
    labelContainer: makeNodeComponent("labelContainer"),
    // Metadata about props expected for PlasmicRadio
    internalVariantProps: PlasmicRadio__VariantProps,
    internalArgProps: PlasmicRadio__ArgProps
  }
);

export default PlasmicRadio;
/* prettier-ignore-end */
