// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4k5VUvYN9ByL8a1GrrWDBZ
// Component: d5Ll5vwAWQ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plume_plasmic_kit_leos_wip.module.css"; // plasmic-import: 4k5VUvYN9ByL8a1GrrWDBZ/projectcss
import sty from "./PlasmicFieldLabel.module.css"; // plasmic-import: d5Ll5vwAWQ/css
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: dqodewSdWI/icon

export const PlasmicFieldLabel__VariantProps = new Array("withIcons");

export const PlasmicFieldLabel__ArgProps = new Array(
  "children",
  "startIcon",
  "alt"
);

function PlasmicFieldLabel__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__withIcons_noLabel]: hasVariant(
          variants,
          "withIcons",
          "noLabel"
        ),

        [sty.root__withIcons_startIcon]: hasVariant(
          variants,
          "withIcons",
          "startIcon"
        )
      })}
    >
      {(hasVariant(variants, "withIcons", "startIcon") ? true : false) ? (
        <div
          data-plasmic-name={"startIconContainer"}
          data-plasmic-override={overrides.startIconContainer}
          className={classNames(defaultcss.all, sty.startIconContainer, {
            [sty.startIconContainer__withIcons_startIcon]: hasVariant(
              variants,
              "withIcons",
              "startIcon"
            )
          })}
          title={args.alt}
        >
          <p.PlasmicSlot
            defaultContents={
              <Icon7Icon
                data-plasmic-name={"start"}
                data-plasmic-override={overrides.start}
                className={classNames(defaultcss.all, sty.start)}
                role={"img"}
              />
            }
            value={args.startIcon}
            className={classNames(sty.slotStartIcon)}
          />
        </div>
      ) : null}
      {(hasVariant(variants, "withIcons", "noLabel") ? false : true) ? (
        <p.PlasmicSlot
          defaultContents={"Family"}
          value={args.children}
          className={classNames(sty.slotChildren, {
            [sty.slotChildren__withIcons_noLabel]: hasVariant(
              variants,
              "withIcons",
              "noLabel"
            )
          })}
        />
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "startIconContainer", "start"],
  startIconContainer: ["startIconContainer", "start"],
  start: ["start"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFieldLabel__ArgProps,
      internalVariantPropNames: PlasmicFieldLabel__VariantProps
    });

    return PlasmicFieldLabel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFieldLabel";
  } else {
    func.displayName = `PlasmicFieldLabel.${nodeName}`;
  }
  return func;
}

export const PlasmicFieldLabel = Object.assign(
  // Top-level PlasmicFieldLabel renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    startIconContainer: makeNodeComponent("startIconContainer"),
    start: makeNodeComponent("start"),
    // Metadata about props expected for PlasmicFieldLabel
    internalVariantProps: PlasmicFieldLabel__VariantProps,
    internalArgProps: PlasmicFieldLabel__ArgProps
  }
);

export default PlasmicFieldLabel;
/* prettier-ignore-end */
