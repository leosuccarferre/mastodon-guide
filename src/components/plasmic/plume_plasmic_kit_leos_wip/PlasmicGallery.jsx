// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4k5VUvYN9ByL8a1GrrWDBZ
// Component: uMWwxdKQA0By
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Checkbox from "../../Checkbox"; // plasmic-import: Zj94HcL0zZk4/component
import Select from "../../Select"; // plasmic-import: VYzUFyB8qmrA/component
import SelectOption from "../../SelectOption"; // plasmic-import: bEWEojMDzlhL/component
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plume_plasmic_kit_leos_wip.module.css"; // plasmic-import: 4k5VUvYN9ByL8a1GrrWDBZ/projectcss
import sty from "./PlasmicGallery.module.css"; // plasmic-import: uMWwxdKQA0By/css

export const PlasmicGallery__VariantProps = new Array();

export const PlasmicGallery__ArgProps = new Array();

function PlasmicGallery__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Checkbox
        className={classNames("__wab_instance", sty.checkbox__jAsX)}
        hasLabel={"hasLabel"}
      >
        {"Check this out!!"}
      </Checkbox>

      <Checkbox
        className={classNames("__wab_instance", sty.checkbox__raQzh)}
        hasLabel={"hasLabel"}
        isSelected={"isSelected"}
      >
        {"Check this out!!"}
      </Checkbox>

      <Checkbox
        className={classNames("__wab_instance", sty.checkbox___1YNaD)}
        hasLabel={"hasLabel"}
        isDisabled={"isDisabled"}
      >
        {"Check this out!!"}
      </Checkbox>

      <Select
        data-plasmic-name={"select"}
        data-plasmic-override={overrides.select}
        className={classNames("__wab_instance", sty.select)}
        isOpen={"isOpen"}
        options={
          <React.Fragment>
            <SelectOption
              className={classNames("__wab_instance", sty.selectOption__puwIe)}
            >
              {"California"}
            </SelectOption>

            <SelectOption
              className={classNames("__wab_instance", sty.selectOption___8GRSk)}
            >
              {"California"}
            </SelectOption>

            <SelectOption
              className={classNames("__wab_instance", sty.selectOption__gHfVo)}
            >
              {"California"}
            </SelectOption>
          </React.Fragment>
        }
        triggerContent={"California"}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "select"],
  select: ["select"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicGallery__ArgProps,
      internalVariantPropNames: PlasmicGallery__VariantProps
    });

    return PlasmicGallery__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGallery";
  } else {
    func.displayName = `PlasmicGallery.${nodeName}`;
  }
  return func;
}

export const PlasmicGallery = Object.assign(
  // Top-level PlasmicGallery renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    select: makeNodeComponent("select"),
    // Metadata about props expected for PlasmicGallery
    internalVariantProps: PlasmicGallery__VariantProps,
    internalArgProps: PlasmicGallery__ArgProps
  }
);

export default PlasmicGallery;
/* prettier-ignore-end */
