// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4k5VUvYN9ByL8a1GrrWDBZ
// Component: p-JdsWKcXx
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plume_plasmic_kit_leos_wip.module.css"; // plasmic-import: 4k5VUvYN9ByL8a1GrrWDBZ/projectcss
import sty from "./PlasmicTextAreaField.module.css"; // plasmic-import: p-JdsWKcXx/css

export const PlasmicTextAreaField__VariantProps = new Array();

export const PlasmicTextAreaField__ArgProps = new Array("placeholder", "val");

function PlasmicTextAreaField__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [
    isTextareaContainerFocusVisibleWithin,
    triggerTextareaContainerFocusVisibleWithinProps
  ] = useTrigger("useFocusVisibleWithin", {
    isTextInput: true
  });

  const triggers = {
    focusVisibleWithin_textareaContainer: isTextareaContainerFocusVisibleWithin
  };

  return (
    <div
      data-plasmic-name={"textareaContainer"}
      data-plasmic-override={overrides.textareaContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.textareaContainer,
        {
          [sty.textareaContainer____focusVisibleWithin]:
            triggers.focusVisibleWithin_textareaContainer
        }
      )}
      data-plasmic-trigger-props={[
        triggerTextareaContainerFocusVisibleWithinProps
      ]}
    >
      <textarea
        data-plasmic-name={"textarea"}
        data-plasmic-override={overrides.textarea}
        className={classNames(defaultcss.textarea, sty.textarea, {
          [sty.textarea____focusVisibleWithin]:
            triggers.focusVisibleWithin_textareaContainer
        })}
        placeholder={
          args.placeholder !== undefined ? args.placeholder : "Enter textâ€¦"
        }
        value={args.val !== undefined ? args.val : ""}
      />
    </div>
  );
}

const PlasmicDescendants = {
  textareaContainer: ["textareaContainer", "textarea"],
  textarea: ["textarea"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTextAreaField__ArgProps,
      internalVariantPropNames: PlasmicTextAreaField__VariantProps
    });

    return PlasmicTextAreaField__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "textareaContainer") {
    func.displayName = "PlasmicTextAreaField";
  } else {
    func.displayName = `PlasmicTextAreaField.${nodeName}`;
  }
  return func;
}

export const PlasmicTextAreaField = Object.assign(
  // Top-level PlasmicTextAreaField renders the root element
  makeNodeComponent("textareaContainer"),
  {
    // Helper components rendering sub-elements
    textarea: makeNodeComponent("textarea"),
    // Metadata about props expected for PlasmicTextAreaField
    internalVariantProps: PlasmicTextAreaField__VariantProps,
    internalArgProps: PlasmicTextAreaField__ArgProps
  }
);

export default PlasmicTextAreaField;
/* prettier-ignore-end */
