// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4k5VUvYN9ByL8a1GrrWDBZ
// Component: UobU37Y6v_a6
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Radio from "../../Radio"; // plasmic-import: e8KgVpkHLJaJ/component
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plume_plasmic_kit_leos_wip.module.css"; // plasmic-import: 4k5VUvYN9ByL8a1GrrWDBZ/projectcss
import sty from "./PlasmicRadioGroup.module.css"; // plasmic-import: UobU37Y6v_a6/css

export const PlasmicRadioGroup__VariantProps = new Array(
  "isDisabled",
  "isHorizontal",
  "hasLabel"
);

export const PlasmicRadioGroup__ArgProps = new Array("label", "children");

function PlasmicRadioGroup__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__isHorizontal]: hasVariant(
          variants,
          "isHorizontal",
          "isHorizontal"
        )
      })}
    >
      {(hasVariant(variants, "hasLabel", "hasLabel") ? true : false) ? (
        <div
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          className={classNames(defaultcss.all, sty.labelContainer, {
            [sty.labelContainer__hasLabel]: hasVariant(
              variants,
              "hasLabel",
              "hasLabel"
            ),

            [sty.labelContainer__isHorizontal]: hasVariant(
              variants,
              "isHorizontal",
              "isHorizontal"
            )
          })}
        >
          <p.PlasmicSlot defaultContents={"Label"} value={args.label} />
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"optionsContainer"}
        data-plasmic-override={overrides.optionsContainer}
        hasGap={true}
        className={classNames(defaultcss.all, sty.optionsContainer, {
          [sty.optionsContainer__isHorizontal]: hasVariant(
            variants,
            "isHorizontal",
            "isHorizontal"
          )
        })}
      >
        <p.PlasmicSlot
          defaultContents={
            <React.Fragment>
              <Radio
                className={classNames("__wab_instance", sty.radio__gEsA5)}
                hasLabel={"hasLabel"}
              >
                {"Option 1"}
              </Radio>

              <Radio
                className={classNames("__wab_instance", sty.radio__o53Fa)}
                hasLabel={"hasLabel"}
                isSelected={"isSelected"}
              >
                {"Option 2"}
              </Radio>

              <Radio
                className={classNames("__wab_instance", sty.radio__xrsgE)}
                hasLabel={"hasLabel"}
                isDisabled={"isDisabled"}
              >
                {"Option 3"}
              </Radio>

              <Radio
                className={classNames("__wab_instance", sty.radio__u6NV7)}
                hasLabel={"hasLabel"}
              >
                {"Option 4"}
              </Radio>
            </React.Fragment>
          }
          value={args.children}
        />
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "labelContainer", "optionsContainer"],
  labelContainer: ["labelContainer"],
  optionsContainer: ["optionsContainer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRadioGroup__ArgProps,
      internalVariantPropNames: PlasmicRadioGroup__VariantProps
    });

    return PlasmicRadioGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRadioGroup";
  } else {
    func.displayName = `PlasmicRadioGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicRadioGroup = Object.assign(
  // Top-level PlasmicRadioGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    labelContainer: makeNodeComponent("labelContainer"),
    optionsContainer: makeNodeComponent("optionsContainer"),
    // Metadata about props expected for PlasmicRadioGroup
    internalVariantProps: PlasmicRadioGroup__VariantProps,
    internalArgProps: PlasmicRadioGroup__ArgProps
  }
);

export default PlasmicRadioGroup;
/* prettier-ignore-end */
