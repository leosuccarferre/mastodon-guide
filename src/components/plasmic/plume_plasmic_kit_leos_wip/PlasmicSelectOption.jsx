// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4k5VUvYN9ByL8a1GrrWDBZ
// Component: bEWEojMDzlhL
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plume_plasmic_kit_leos_wip.module.css"; // plasmic-import: 4k5VUvYN9ByL8a1GrrWDBZ/projectcss
import sty from "./PlasmicSelectOption.module.css"; // plasmic-import: bEWEojMDzlhL/css

export const PlasmicSelectOption__VariantProps = new Array(
  "isDisabled",
  "isSelected"
);

export const PlasmicSelectOption__ArgProps = new Array("children");

function PlasmicSelectOption__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__isDisabled]: hasVariant(
          variants,
          "isDisabled",
          "isDisabled"
        ),

        [sty.root__isSelected]: hasVariant(variants, "isSelected", "isSelected")
      })}
    >
      <div
        data-plasmic-name={"optionContainer"}
        data-plasmic-override={overrides.optionContainer}
        className={classNames(defaultcss.all, sty.optionContainer, {
          [sty.optionContainer__isDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),

          [sty.optionContainer__isSelected]: hasVariant(
            variants,
            "isSelected",
            "isSelected"
          )
        })}
      >
        <p.PlasmicSlot
          defaultContents={"Option"}
          value={args.children}
          className={classNames(sty.slotChildren, {
            [sty.slotChildren__isDisabled]: hasVariant(
              variants,
              "isDisabled",
              "isDisabled"
            ),

            [sty.slotChildren__isSelected]: hasVariant(
              variants,
              "isSelected",
              "isSelected"
            )
          })}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "optionContainer"],
  optionContainer: ["optionContainer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSelectOption__ArgProps,
      internalVariantPropNames: PlasmicSelectOption__VariantProps
    });

    return PlasmicSelectOption__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelectOption";
  } else {
    func.displayName = `PlasmicSelectOption.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectOption = Object.assign(
  // Top-level PlasmicSelectOption renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    optionContainer: makeNodeComponent("optionContainer"),
    // Metadata about props expected for PlasmicSelectOption
    internalVariantProps: PlasmicSelectOption__VariantProps,
    internalArgProps: PlasmicSelectOption__ArgProps
  }
);

export default PlasmicSelectOption;
/* prettier-ignore-end */
