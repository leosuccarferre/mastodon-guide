// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4k5VUvYN9ByL8a1GrrWDBZ
// Component: rKiCb_UlEW
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 0PjHSFlclC74/component
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plume_plasmic_kit_leos_wip.module.css"; // plasmic-import: 4k5VUvYN9ByL8a1GrrWDBZ/projectcss
import sty from "./PlasmicPanelHeader.module.css"; // plasmic-import: rKiCb_UlEW/css
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: fuX1IDjMci/icon

export const PlasmicPanelHeader__VariantProps = new Array();

export const PlasmicPanelHeader__ArgProps = new Array("children");

function PlasmicPanelHeader__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(defaultcss.all, sty.box)}
      >
        <p.PlasmicSlot
          defaultContents={"Text"}
          value={args.children}
          className={classNames(sty.slotChildren)}
        />
      </div>

      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button)}
        startIcon={
          <Icon8Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg)}
            role={"img"}
          />
        }
        type={["rounded", "flat"]}
        withIcons={["noLabel", "start"]}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "box", "button", "svg"],
  box: ["box"],
  button: ["button", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelHeader__ArgProps,
      internalVariantPropNames: PlasmicPanelHeader__VariantProps
    });

    return PlasmicPanelHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelHeader";
  } else {
    func.displayName = `PlasmicPanelHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelHeader = Object.assign(
  // Top-level PlasmicPanelHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicPanelHeader
    internalVariantProps: PlasmicPanelHeader__VariantProps,
    internalArgProps: PlasmicPanelHeader__ArgProps
  }
);

export default PlasmicPanelHeader;
/* prettier-ignore-end */
