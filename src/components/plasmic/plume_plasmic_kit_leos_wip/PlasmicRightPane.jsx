// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4k5VUvYN9ByL8a1GrrWDBZ
// Component: O04XfIS9P3
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextSettingsPanel from "../../TextSettingsPanel"; // plasmic-import: CMgljSlVD_/component
import Divider from "../../Divider"; // plasmic-import: 93-pxCA2jD/component
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plume_plasmic_kit_leos_wip.module.css"; // plasmic-import: 4k5VUvYN9ByL8a1GrrWDBZ/projectcss
import sty from "./PlasmicRightPane.module.css"; // plasmic-import: O04XfIS9P3/css

export const PlasmicRightPane__VariantProps = new Array();

export const PlasmicRightPane__ArgProps = new Array();

function PlasmicRightPane__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <TextSettingsPanel
        className={classNames("__wab_instance", sty.textSettingsPanel__rg0H)}
      />

      <Divider
        data-plasmic-name={"divider"}
        data-plasmic-override={overrides.divider}
        className={classNames("__wab_instance", sty.divider)}
      />

      <TextSettingsPanel
        className={classNames("__wab_instance", sty.textSettingsPanel__jq5Wm)}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "divider"],
  divider: ["divider"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRightPane__ArgProps,
      internalVariantPropNames: PlasmicRightPane__VariantProps
    });

    return PlasmicRightPane__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRightPane";
  } else {
    func.displayName = `PlasmicRightPane.${nodeName}`;
  }
  return func;
}

export const PlasmicRightPane = Object.assign(
  // Top-level PlasmicRightPane renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    divider: makeNodeComponent("divider"),
    // Metadata about props expected for PlasmicRightPane
    internalVariantProps: PlasmicRightPane__VariantProps,
    internalArgProps: PlasmicRightPane__ArgProps
  }
);

export default PlasmicRightPane;
/* prettier-ignore-end */
