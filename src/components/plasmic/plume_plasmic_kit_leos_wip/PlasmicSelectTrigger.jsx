// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4k5VUvYN9ByL8a1GrrWDBZ
// Component: cfwjw9w2-YOi
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_plume_plasmic_kit_leos_wip.module.css"; // plasmic-import: 4k5VUvYN9ByL8a1GrrWDBZ/projectcss
import sty from "./PlasmicSelectTrigger.module.css"; // plasmic-import: cfwjw9w2-YOi/css
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: sLYQKxFjVe/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: kAYvbkaCSM/icon

export const PlasmicSelectTrigger__VariantProps = new Array(
  "isActive",
  "isDisabled"
);

export const PlasmicSelectTrigger__ArgProps = new Array("children");

function PlasmicSelectTrigger__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [isRootFocusVisible, triggerRootFocusVisibleProps] = useTrigger(
    "useFocusVisible",
    {
      isTextInput: false
    }
  );

  const triggers = {
    focusVisible_root: isRootFocusVisible
  };

  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.button,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root____focusVisible]: triggers.focusVisible_root,
          [sty.root__isActive]: hasVariant(variants, "isActive", "isActive"),
          [sty.root__isDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          )
        }
      )}
      data-plasmic-trigger-props={[triggerRootFocusVisibleProps]}
    >
      <div
        data-plasmic-name={"contentContainer"}
        data-plasmic-override={overrides.contentContainer}
        className={classNames(defaultcss.all, sty.contentContainer)}
      >
        <p.PlasmicSlot
          defaultContents={"Select an optionâ€¦"}
          value={args.children}
          className={classNames(sty.slotChildren, {
            [sty.slotChildren____focusVisible]: triggers.focusVisible_root,
            [sty.slotChildren__isActive]: hasVariant(
              variants,
              "isActive",
              "isActive"
            )
          })}
        />
      </div>

      <p.PlasmicIcon
        PlasmicIconType={
          hasVariant(variants, "isActive", "isActive") ? Icon6Icon : Icon2Icon
        }
        className={classNames(defaultcss.all, sty.svg___2Uj44, {
          [sty.svg__isActive___2Uj44LyiJ8]: hasVariant(
            variants,
            "isActive",
            "isActive"
          )
        })}
        role={"img"}
      />

      {(hasVariant(variants, "isActive", "isActive") ? false : false) ? (
        <Icon6Icon
          className={classNames(defaultcss.all, sty.svg__ohRp7, {
            [sty.svg__isActive__ohRp7LyiJ8]: hasVariant(
              variants,
              "isActive",
              "isActive"
            )
          })}
          role={"img"}
        />
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "contentContainer"],
  contentContainer: ["contentContainer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSelectTrigger__ArgProps,
      internalVariantPropNames: PlasmicSelectTrigger__VariantProps
    });

    return PlasmicSelectTrigger__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelectTrigger";
  } else {
    func.displayName = `PlasmicSelectTrigger.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectTrigger = Object.assign(
  // Top-level PlasmicSelectTrigger renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    contentContainer: makeNodeComponent("contentContainer"),
    // Metadata about props expected for PlasmicSelectTrigger
    internalVariantProps: PlasmicSelectTrigger__VariantProps,
    internalArgProps: PlasmicSelectTrigger__ArgProps
  }
);

export default PlasmicSelectTrigger;
/* prettier-ignore-end */
