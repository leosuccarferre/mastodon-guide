"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var react_dom_1 = __importDefault(require("react-dom"));
var listeners = [];
var queries = {};
function matchScreenVariants() {
    if (!globalThis.matchMedia) {
        return [];
    }
    return Object.entries(queries)
        .filter(function (_a) {
        var query = _a[0];
        return globalThis.matchMedia(query);
    })
        .map(function (_a) {
        var value = _a[1];
        return value;
    });
}
var curScreenVariant = [];
if (globalThis.addEventListener) {
    globalThis.addEventListener("resize", function () {
        var screenVariant = matchScreenVariants();
        if (screenVariant !== curScreenVariant) {
            curScreenVariant = screenVariant;
            react_dom_1.default.unstable_batchedUpdates(function () {
                return listeners.forEach(function (listener) { return listener(); });
            });
        }
    });
}
function useScreenVariants(screenQueries) {
    var _a = React.useState(), updateState = _a[1];
    React.useEffect(function () {
        Object.assign(queries, screenQueries);
    }, []);
    React.useEffect(function () {
        var forceUpdate = function () { return updateState({}); };
        var removeIndex = listeners.push(forceUpdate) - 1;
        return function () {
            listeners.splice(removeIndex, 1);
        };
    }, []);
    return curScreenVariant;
}
exports.default = useScreenVariants;
